plugins {
    id "org.beryx.jlink" version "3.0.1"
    id "com.diffplug.spotless" version "6.23.3"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

dependencies {
    implementation (libs.codion.swing.framework.ui)

    implementation (libs.json)
    implementation (libs.flatlaf.intellij.themes)

    runtimeOnly (libs.codion.plugin.logback.proxy) {
        exclude group: "com.sun.mail", module: "javax.mail"
    }

    runtimeOnly (libs.codion.framework.db.local)
    runtimeOnly (libs.codion.dbms.h2database)
    runtimeOnly (libs.h2)

    testImplementation (libs.codion.framework.domain.test)
    testImplementation (libs.junit.api)
    testRuntimeOnly (libs.junit.engine)
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

spotless {
    java {
        licenseHeaderFile("${rootDir}/license_header").yearSeparator(' - ')
    }
    format 'javaMisc', {
        target 'src/**/package-info.java', 'src/**/module-info.java'
        licenseHeaderFile("${rootDir}/license_header", '\\/\\*\\*').yearSeparator(' - ')
    }
}

test {
    useJUnitPlatform()
    systemProperty "codion.db.url", "jdbc:h2:mem:h2db"
    systemProperty "codion.db.initScripts", "classpath:create_schema.sql"
    systemProperty "codion.test.user", "scott:tiger"
}

applicationDefaultJvmArgs = [
        "-Xmx64m",
        "-Dcodion.client.connectionType=local",
        "-Dcodion.db.url=jdbc:h2:mem:h2db",
        "-Dcodion.db.initScripts=classpath:create_schema.sql",
        "-Dsun.awt.disablegrab=true"
]

application {
    mainModule.set("is.codion.framework.demos.petclinic")
    mainClass.set("is.codion.framework.demos.petclinic.ui.PetclinicAppPanel")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.deprecation = true
}

asciidoctor {
    inputs.dir("src")
    baseDirFollowsSourceFile()
    attributes "codion-version": project.version.replace("-SNAPSHOT", "")
    asciidoctorj {
        version = "2.5.10"
        attributes "source-highlighter": "prettify"
    }
}

tasks.register("writeVersion") {
    group "build"
    def versionFile = file(sourceSets.main.output.resourcesDir.getAbsolutePath() + "/version.properties")
    inputs.property("version", project.version)
    outputs.file(versionFile)
    outputs.upToDateWhen { false }

    doLast {
        def versionProperties = new Properties()
        versionProperties.put("version", project.version)
        versionProperties.store(versionFile.newWriter(), null)
    }
}

classes.dependsOn writeVersion

tasks.register("copyToGitHubPages", Sync) {
    dependsOn asciidoctor
    group "documentation"
    def documentationDir = project.version.replace("-SNAPSHOT", "")
    from project.layout.buildDirectory.dir("docs/asciidoc")
    into "../codion-pages/doc/${documentationDir}/tutorials/petclinic"
}

jlink {
    imageName.set(project.name)
    moduleName.set(application.mainModule)
    options = ["--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages", "--add-modules",
               "is.codion.framework.db.local,is.codion.dbms.h2database,is.codion.plugin.logback.proxy"]

    addExtraDependencies("slf4j-api")

    launcher {
        jvmArgs = applicationDefaultJvmArgs
    }

    jpackage {
        imageName = "Petclinic"
        appVersion = project.version.replace("-SNAPSHOT", "")
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            installerType = "deb"
            icon = "src/main/icons/petclinic.png"
            installerOptions = [
                    "--resource-dir", "build/jpackage/Petclinic/lib",
                    "--linux-shortcut"
            ]
        }
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerType = "msi"
            icon = "src/main/icons/petclinic.ico"
            installerOptions = [
                    "--win-menu",
                    "--win-shortcut"
            ]
        }
    }
}